{"version":3,"sources":["components/TemperatureInput.js","components/BoilingVerdict.js","App.js","serviceWorker.js","index.js"],"names":["scaleNames","c","f","TemperatureInput","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","e","onTemperatureChange","target","value","temperature","scale","react_default","a","createElement","className","onChange","Component","BoilingVerdict","celsius","toCelsius","fahrenheit","toFahrenheit","tryConvert","convert","input","parseFloat","Number","isNaN","output","Math","round","toString","App","handleCelsiusChange","handleFahrenheitChange","state","setState","href","components_TemperatureInput","components_BoilingVerdict","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bd973603.chunk.js","sourcesContent":["import React,{Component} from \"react\";\n\nconst scaleNames = {\n\tc: 'Celsius',\n\tf: 'Fahrenheit'\n};\n\nclass TemperatureInput extends Component{\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t\t}\n\n\thandleChange(e) {\n\t\tthis.props.onTemperatureChange(e.target.value);\n\t}\n\n\trender() {\n\t\tconst temperature = this.props.temperature;\n\t\tconst scale = this.props.scale;\n\t\treturn (\n\t\t\t<div className=\"temp_input_container\">\n\n\t\t\t\t<h2 className=\"name_temp\">{scaleNames[scale]}:</h2>\n\n\t\t\t\t<span className=\"input input--minoru\">\n\t\t\t\t\t<input className=\"input__field input__field--minoru\" value={temperature}\n\t\t\t\t\t   \tonChange={this.handleChange} />\n\t\t\t\t\t<label className=\"input__label input__label--minoru\">\n\t\t\t\t\t\t<span className=\"input__label-content input__label-content--minoru\">Tempirature</span>\n\t\t\t\t\t</label>\n\t\t\t\t</span>\n\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n\nexport default TemperatureInput;","import React from \"react\";\n\nconst BoilingVerdict = (props) => {\n\tif (props.celsius >= 100) {\n\t\treturn <p>Water boils</p>\n\t}\n\treturn <p>Water does not boil</p>\n};\n\nexport default BoilingVerdict;","import React, { Component } from 'react';\nimport TemperatureInput from \"./components/TemperatureInput\";\nimport BoilingVerdict from \"./components/BoilingVerdict\";\n\nfunction toCelsius(fahrenheit) {\n\treturn (fahrenheit - 32) * 5 / 9;\n}\n\nfunction toFahrenheit(celsius) {\n\treturn (celsius * 9 / 5) + 32;\n}\n\nfunction tryConvert(temperature, convert) {\n\tconst input = parseFloat(temperature);\n\tif (Number.isNaN(input)) {\n\t\treturn '';\n\t}\n\tconst output = convert(input);\n\tconst rounded = Math.round(output * 1000) / 1000;\n\treturn rounded.toString();\n}\n\nclass App extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.handleCelsiusChange = this.handleCelsiusChange.bind(this);\n\t\tthis.handleFahrenheitChange = this.handleFahrenheitChange.bind(this);\n\t\tthis.state = {temperature: '', scale: 'c'};\n\t}\n\n\thandleCelsiusChange(temperature) {\n\t\tthis.setState({scale: 'c', temperature});\n\t}\n\n\thandleFahrenheitChange(temperature) {\n\t\tthis.setState({scale: 'f', temperature});\n\t}\n\n  render() {\n\t  const scale = this.state.scale;\n\t  const temperature = this.state.temperature;\n\t  const celsius = scale === 'f' ? tryConvert(temperature, toCelsius) : temperature;\n\t  const fahrenheit = scale === 'c' ? tryConvert(temperature, toFahrenheit) : temperature;\n\n    return (\n    \t<div className=\"wrapper\">\n\t\t\t\t<div className=\"container-fluid\t\">\n\t\t\t\t\t<div className=\"row no-getters\">\n\t\t\t\t\t\t<div className=\"col-sm-12 name_app\">\n\t\t\t\t\t\t\t<a href=\"#\" className=\"logo\">Water<br/>Boils</a>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"col-sm-12 instruction\">\n\t\t\t\t\t\t\t<p>Enter the temperature and <br/>\n\t\t\t\t\t\t\t\tsee the result.\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"col-sm-12 input_group\">\n\t\t\t\t\t\t\t<TemperatureInput\n\t\t\t\t\t\t\t\tscale=\"c\"\n\t\t\t\t\t\t\t\ttemperature={celsius}\n\t\t\t\t\t\t\t\tonTemperatureChange={this.handleCelsiusChange} />\n\n\t\t\t\t\t\t\t<TemperatureInput\n\t\t\t\t\t\t\t\tscale=\"f\"\n\t\t\t\t\t\t\t\ttemperature={fahrenheit}\n\t\t\t\t\t\t\t\tonTemperatureChange={this.handleFahrenheitChange} />\n\t\t\t\t\t\t</div>\n\n\n\t\t\t\t\t\t<div className=\"col-sm-12 result\">\n\t\t\t\t\t\t\t<BoilingVerdict\n\t\t\t\t\t\t\t\tcelsius={parseFloat(celsius)} />\n\t\t\t\t\t\t</div>\n\n\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t</div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}